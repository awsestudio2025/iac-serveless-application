name: Terraform CI/CD (Autenticación OIDC)

# ----------------------------------------------------------------------
# 1. Definición de Triggers (Cuando se ejecuta)
# ----------------------------------------------------------------------
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

  workflow_dispatch:

# ----------------------------------------------------------------------
# 2. Permisos y Variables Globales
# ----------------------------------------------------------------------
permissions:

  id-token: write 
  contents: read
  
env:
  TF_WORKING_DIR: template/ 

jobs:

  terraform-plan:
    name: "Terraform Plan: Validar y Previsualizar Cambios"
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

    
      - name: Configure AWS Credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:

          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }} 
          aws-region: us-east-1 


      - name: Terraform Init

        run: terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}
      

      - name: Terraform Plan
        id: plan
        run: |
          # Cargamos todas las variables estáticas del archivo prod.tfvars 
          # y pasamos la contraseña (el secreto) directamente con -var.
          terraform plan -input=false -out=tfplan \
            -var-file="prod.tfvars" \
            -var "rds_master_password=${{ secrets.RDS_MASTER_PASSWORD }}"
        working-directory: ${{ env.TF_WORKING_DIR }}
        

  terraform-apply:
    name: "Terraform Apply: Desplegar Cambios"
    runs-on: ubuntu-latest
    

    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    

    needs: terraform-plan 

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3


      - name: Configure AWS Credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }} 
          aws-region: us-east-1 
          
 
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}


      - name: Terraform Apply
        run: |
          # Usamos el mismo patrón de variables para el apply que en el plan.
          terraform apply -auto-approve -input=false \
            -var-file="prod.tfvars" \
            -var "rds_master_password=${{ secrets.RDS_MASTER_PASSWORD }}"
        working-directory: ${{ env.TF_WORKING_DIR }}
