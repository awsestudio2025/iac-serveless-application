name: Terraform CI/CD (Autenticación OIDC)

# ----------------------------------------------------------------------
# 1. Definición de Triggers (Cuando se ejecuta)
# ----------------------------------------------------------------------
on:
  push:
    branches:
      - main # Ejecutar Plan y Apply cuando hay un push a 'main'
  pull_request:
    branches:
      - main # Ejecutar solo Plan cuando hay un Pull Request

# ----------------------------------------------------------------------
# 2. Permisos y Variables Globales
# ----------------------------------------------------------------------
permissions:
  # ¡CRÍTICO! Esto habilita la autenticación OIDC. Permite que GitHub solicite una identidad a AWS.
  id-token: write 
  contents: read
  # <--- LA LÍNEA 'secrets: inherit' HA SIDO ELIMINADA DE AQUÍ
  
env:
  TF_WORKING_DIR: . # Directorio donde se encuentran los archivos .tf
  AWS_REGION: us-east-1 # La región de AWS a la que quieres desplegar

jobs:
  # Job 1: Terraform Plan
  terraform-plan:
    name: "Terraform Plan: Validar y Previsualizar Cambios"
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # 3.1. Configurar Credenciales de AWS (Asumir Rol con OIDC)
      - name: Configure AWS Credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # Usamos el Secreto de GitHub para indicarle a AWS qué Rol debe asumir.
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }} 
          aws-region: ${{ env.AWS_REGION }}

      # 3.2. Terraform Init (Inicializa el estado, descarga módulos)
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}
      
      # 3.3. Terraform Plan
      - name: Terraform Plan
        id: plan
        # Pasamos la contraseña (RDS_MASTER_PASSWORD) desde el Secreto de GitHub 
        # a la variable de Terraform de forma segura.
        run: |
          terraform plan -input=false -out=tfplan -var "rds_master_password=${{ secrets.RDS_MASTER_PASSWORD }}"
        working-directory: ${{ env.TF_WORKING_DIR }}
        
  # Job 2: Terraform Apply
  terraform-apply:
    name: "Terraform Apply: Desplegar Cambios"
    runs-on: ubuntu-latest
    
    # CRÍTICO: Este job SÓLO se ejecuta si el evento es un 'push' a la rama 'main' (el commit final).
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    # Asegura que el plan fue exitoso antes de aplicar
    needs: terraform-plan 

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # 4.1. Configurar Credenciales de AWS (Re-asumir Rol con OIDC)
      - name: Configure AWS Credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }} 
          aws-region: ${{ env.AWS_REGION }}
          
      # 4.2. Terraform Init
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}

      # 4.3. Terraform Apply
      - name: Terraform Apply
        # Se repite el paso de pasar la variable sensible para la aplicación final.
        run: |
          terraform apply -auto-approve -input=false -var "rds_master_password=${{ secrets.RDS_MASTER_PASSWORD }}"
        working-directory: ${{ env.TF_WORKING_DIR }}
